<!-- European Union Public License version 1.2 -->
<!-- Copyright © 2024 Rick Beerendonk -->

@page "/"

@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Home</h2>

<ul>
    <li>Authenticated (Cascading): @authCascading</li>
    <li>Authenticated (Inject): @authInject</li>
</ul>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool authCascading;
    private bool authInject;

    /*

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        authInject = user.Identity.IsAuthenticated;
        authCascading = user.Identity.IsAuthenticated;

        // Subscribe to authentication state changes
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticationStateChanged += HandleAuthenticationStateChanged;
    }

    private async void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        authInject = user.Identity.IsAuthenticated;
        authCascading = user.Identity.IsAuthenticated;

        StateHasChanged(); // Notify Blazor to re-render the component
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }
    */
}
