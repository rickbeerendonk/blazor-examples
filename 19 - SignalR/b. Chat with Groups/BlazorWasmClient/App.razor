<!-- European Union Public License version 1.2 -->
<!-- Copyright © 2025 Rick Beerendonk -->

@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

<h1>SignalR: Blazor</h1>

<input @bind="user" placeholder="User" />
<input @bind="message" placeholder="Message" />
<button @onclick="SendMessageToGroup">Send</button>
<ul>
    @foreach (var logEntry in log)
    {
        <li>@logEntry</li>
    }
</ul>

@code {
    private HubConnection? connection;
    private string user = string.Empty;
    private string message = string.Empty;
    private List<string> log { get; set; } = new();
    private readonly string group = "Blazor";

    protected override async Task OnInitializedAsync()
    {
        // Initialize the SignalR connection
        connection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7270/chat")
            .WithAutomaticReconnect()
            .Build();

        // Handle incoming messages
        connection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            InvokeAsync(() =>
            {
                log.Add($"{user}: {message}");

                // Force a re-render
                // This is necessary because SignalR calls this method on a different thread
                // than the one used by Blazor to render the UI.
                StateHasChanged();
            });
        });

        // Start the connection and join the "Blazor" group
        await connection.StartAsync();
        await JoinGroup(group);
    }

    private async Task JoinGroup(string groupName)
    {
        if (connection is not null)
        {
            try
            {
                await connection.InvokeAsync("JoinGroup", groupName);
                log.Add($"System: Joined group '{groupName}'.");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                log.Add($"System: Failed to join group '{groupName}'. Error: {ex.Message}");
                StateHasChanged();
            }
        }
    }

    private async Task SendMessageToGroup()
    {
        if (connection is not null && !string.IsNullOrWhiteSpace(user) && !string.IsNullOrWhiteSpace(message))
        {
            await connection.InvokeAsync("SendMessageToGroup", group, user, message);
            message = string.Empty; // Clear the input after sending
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }
}