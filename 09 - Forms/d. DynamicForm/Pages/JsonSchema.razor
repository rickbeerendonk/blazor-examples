@page "/json-schema"
@inject JsonSchemaService JsonService

<PageTitle>JSON Schema</PageTitle>

<h1>3. JSON Schema</h1>
<p>Schema is loaded from <code>wwwroot/schema/customer.json</code> and rendered to a dictionary model.</p>

@if (schema is null)
{
    <p>Loadingâ€¦</p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
        <ValidationSummary class="validation-summary" />

        <fieldset>
            <legend>@schema.Title</legend>
            @foreach (var field in schema.Fields)
            {
                <DynamicFieldRenderer TValue="object" Field="field" Model="formData" />
            }
        </fieldset>

    <button type="submit">Submit</button>
    </EditForm>

    @if (submitted is not null)
    {
    <h3>Result</h3>
        <pre>@submitted</pre>
    }
}

@code {
    private DynamicForms.Models.JsonSchema? schema;
    private Dictionary<string, object?> formData = new();
    private EditContext? editContext;
    private ValidationMessageStore? messages;
    private string? submitted;

    protected override async Task OnInitializedAsync()
    {
        schema = await JsonService.GetAsync("schema/customer.json");
        editContext = new EditContext(formData);
        messages = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (_, __) => Validate();
        editContext.OnFieldChanged += (_, __) => Validate();
    }

    private void Validate()
    {
        if (editContext is null || messages is null || schema is null) return;
        messages.Clear();

        foreach (var f in schema.Fields)
        {
            if (!f.Required) continue;
            var val = formData.TryGetValue(f.Property, out var v) ? v : null;
            var isEmpty = val is null || (val is string s && string.IsNullOrWhiteSpace(s));
            if (isEmpty)
            {
                messages.Add(new FieldIdentifier(formData, f.Property), $"{f.Label} is required.");
            }
        }
        editContext.NotifyValidationStateChanged();
    }

    private void HandleValidSubmit()
    {
        Validate();
        if (editContext is null) return;
        if (!editContext.GetValidationMessages().Any())
        {
            submitted = System.Text.Json.JsonSerializer.Serialize(formData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
    }
}
